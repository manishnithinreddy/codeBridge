server:
  port: 8084 # Different port for the new service

spring:
  application:
    name: codebridge-session-service
  # Redis configuration (copied from server-service, assuming same Redis instance)
  data:
    redis:
      host: localhost
      port: 6379
      # password: your-redis-password
      # ssl: false
      # timeout: 2000
      # lettuce:
      #   pool:
      #     max-active: 8
      #     max-idle: 8
      #     min-idle: 0
  # Cloud config client (if used, typically disabled for local dev)
  cloud:
    config:
      enabled: false

# Eureka client configuration (copied from server-service, assuming registers with same Eureka)
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

# Management endpoints (copied from server-service)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging configuration (can be adjusted as needed for this service)
logging:
  level:
    com.codebridge.session: DEBUG # Specific package for this service
    org.springframework: INFO
    # org.hibernate: INFO # Not using JPA directly here

# Properties for Session Management (SSH and DB) and JWT
# These are used by SshSessionConfigProperties, DbSessionConfigProperties, JwtConfigProperties
codebridge:
  session:
    ssh:
      timeout-ms: 600000 # SSH session idle timeout (10 minutes)
    db:
      timeout-ms: 300000 # DB session idle timeout (5 minutes)
  security:
    jwt:
      # Secret key for validating incoming User JWTs from the main platform/IdP
      # Ensure this is strong and kept secret in production, matching the IdP's signing key
      shared-secret: "your-VERY-secure-SHARED-secret-for-incoming-user-JWTs-REPLACE-THIS"

jwt:
  secret: your-very-secure-and-long-jwt-secret-key-replace-this # IMPORTANT: Use a unique, strong secret per environment
  expiration-ms: 600000 # JWT expiration time (10 minutes)
